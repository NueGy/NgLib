<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nglib.Core</name>
    </assembly>
    <members>
        <member name="T:Nglib.APP.CODE.CodeCompileTools">
            <summary>
            Aide à la manipulation des assemblies
            </summary>
        </member>
        <member name="M:Nglib.APP.CODE.CodeCompileTools.ExecuteCodeAsync(Nglib.APP.CODE.ICompiledCode,System.Object[])">
            <summary>
            Permet l'execution de code compilé
            </summary>
            <param name="executeContext"></param>
        </member>
        <member name="P:Nglib.APP.CODE.ICompiledCode.SourceCodeName">
            <summary>
            Uniq Key
            </summary>
        </member>
        <member name="P:Nglib.APP.CODE.ICompiledCode.ClassFullName">
            <summary>
            Chemin de la classe
            </summary>
        </member>
        <member name="P:Nglib.APP.CODE.ICompiledCode.CallMasterMethod">
            <summary>
            Methode d'appel principal
            </summary>
        </member>
        <member name="P:Nglib.APP.CODE.ICompiledCode.CompiledType">
            <summary>
            Résultat du code source compié
            </summary>
        </member>
        <member name="P:Nglib.APP.CODE.ICompiledCode.Assembly">
            <summary>
            Assempbly qui contient la méthode
            </summary>
        </member>
        <member name="T:Nglib.APP.CODE.ProjCompileTools">
            <summary>
            Outils divers pour la compilation des projets .NET (Utilisation via powershell)
            </summary>
        </member>
        <member name="M:Nglib.APP.CODE.ProjCompileTools.ParseCsproj(System.String)">
            <summary>
            parser un fichier csproj pour en extraire les infos de version
            </summary>
        </member>
        <member name="M:Nglib.APP.CODE.ProjCompileTools.CompileProject(System.String,System.String,System.String)">
            <summary>
            Compilation d'un projet .NET
            </summary>
        </member>
        <member name="T:Nglib.APP.DIAG.LogAtStringBuilder">
            <summary>
            Une chaine pour gérer des logs
            </summary>
        </member>
        <member name="T:Nglib.APP.DIAG.WatchCounters">
            <summary>
            Gestion d'une collection de Stopwatch
            </summary>
        </member>
        <member name="T:Nglib.APP.LOG.AppWatch">
            <summary>
            Model pour monitorer
            </summary>
        </member>
        <member name="M:Nglib.APP.LOG.GelfLogWrapper.ConvertGzip(System.String,System.Text.Encoding)">
            <summary>
            Gzips a string
            </summary>
        </member>
        <member name="T:Nglib.APP.PROCESS.AppProcess">
            <summary>
            Permet de mieu gérer les automates
            </summary>
        </member>
        <member name="P:Nglib.APP.PROCESS.AppProcess.context">
            <summary>
            Context d'execution (config)
            </summary>
        </member>
        <member name="P:Nglib.APP.PROCESS.AppProcess.appEnv">
            <summary>
            Environnement d'execution
            </summary>
        </member>
        <member name="M:Nglib.APP.PROCESS.AppProcess.RunProcessAsync">
            <summary>
            Lancement du processus (Boucle) en utilisant 
            METHODE DE LANCEMENT PRINCIPALE
            </summary>
        </member>
        <member name="M:Nglib.APP.PROCESS.AppProcess.RunProcess">
            <summary>
            Lancement du processus (Boucle) en utilisant 
            METHODE DE LANCEMENT PRINCIPALE
            </summary>
        </member>
        <member name="M:Nglib.APP.PROCESS.AppProcess.InitProcessAsync">
            <summary>
            Initialisation des données nécessaire au processus
            </summary>
        </member>
        <member name="M:Nglib.APP.PROCESS.AppProcess.RunInstanceAsync">
            <summary>
            Lancement d'une boucle du processus
            </summary>
            <returns>Traitement concluant ou non : Si true, il arretera la bloucle</returns>
        </member>
        <member name="M:Nglib.APP.PROCESS.AppProcess.RunBeforeInstanceAsync">
            <summary>
            se lancera avant la methode principale RunInstanceAsync
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.APP.PROCESS.AppProcess.RunAfterInstanceAsync">
            <summary>
            Se lancera après la methode principale RunInstanceAsync
            </summary>
            <returns></returns>
        </member>
        <member name="E:Nglib.APP.PROCESS.AppProcess.LogEvent">
            <summary>
            Evenement lors de la création d'un log
            </summary>
        </member>
        <member name="M:Nglib.APP.PROCESS.AppProcess.LogAsync(System.String,System.Int32)">
            <summary>
            Ajouter un log (SAFE)
            </summary>
            <returns>false= Error</returns>
        </member>
        <member name="M:Nglib.APP.PROCESS.AppProcess.Log(System.String,System.Int32)">
            <summary>
            Ajouter un log (SAFE)
            </summary>
        </member>
        <member name="M:Nglib.APP.PROCESS.AppProcess.LogAsync(Nglib.APP.LOG.ILog)">
            <summary>
            Ajouter un log (SAFE)
            </summary>
            <returns>false= Error</returns>
        </member>
        <member name="T:Nglib.APP.PROCESS.AppProcessContext">
            <summary>
            Variable et configuration du process
            </summary>
        </member>
        <member name="M:Nglib.APP.PROCESS.AppProcessContext.#ctor">
            <summary>
            Le context ne peus être initialisé que par cette DLL
            </summary>
        </member>
        <member name="P:Nglib.APP.PROCESS.AppProcessContext.ProcessRunId">
            <summary>
            Numéro unique de lancement du processus
            </summary>
        </member>
        <member name="P:Nglib.APP.PROCESS.AppProcessContext.ProcessName">
            <summary>
            nom du processus
            </summary>
        </member>
        <member name="F:Nglib.APP.PROCESS.AppProcessContext.ProcessLoopCount">
            <summary>
            Nombre de boucle effectuées
            </summary>
        </member>
        <member name="F:Nglib.APP.PROCESS.AppProcessContext.ConfigThreadCount">
            <summary>
            Nombre de threads à lancer la methode principale (SOON !!!)
            </summary>
        </member>
        <member name="F:Nglib.APP.PROCESS.AppProcessContext.ProcessInitiate">
            <summary>
            Date d'initialisation du processus
            </summary>
        </member>
        <member name="F:Nglib.APP.PROCESS.AppProcessContext.ProcessRunWatch">
            <summary>
            Durée d'exécution sur l'ensemble de processus (before, loop, after)(Hors Init)
            </summary>
        </member>
        <member name="F:Nglib.APP.PROCESS.AppProcessContext.ProcessInitWatch">
            <summary>
            Durée d'exécution de l'initialisation
            </summary>
        </member>
        <member name="P:Nglib.APP.PROCESS.AppProcessContext.FluxConfig">
            <summary>
            Configuration personalisable pour ce processus
            </summary>
        </member>
        <member name="P:Nglib.APP.PROCESS.AppProcessContext.CancelToken">
            <summary>
            Pour forcer l'arret du processus
            </summary>
        </member>
        <member name="P:Nglib.APP.PROCESS.AppProcessContext.ProccesRunActionMethod">
            <summary>
            Methode lancé par defaul si RunInstance() non hérité
            </summary>
        </member>
        <member name="P:Nglib.APP.PROCESS.AppProcessContext.ProccesInitActionMethod">
            <summary>
            Methode lancé par defaul si Init() non hérité
            </summary>
        </member>
        <member name="P:Nglib.APP.PROCESS.AppProcessContext.ErrorException">
            <summary>
            Error
            </summary>
        </member>
        <member name="P:Nglib.APP.PROCESS.AppProcessContext.Mutex">
            <summary>
            Mutex lible d'utilisation
            </summary>
        </member>
        <member name="F:Nglib.APP.PROCESS.AppProcessContext.DatasDictionary">
            <summary>
            Données Libres (Cast?)
            </summary>
        </member>
        <member name="P:Nglib.APP.PROCESS.AppProcessContext.Data">
            <summary>
            Données Libre  (Cast?)
            </summary>
        </member>
        <member name="F:Nglib.APP.PROCESS.AppProcessContext.ConfigLoopIterations">
            <summary>
            Nombre d'itérations de lancement de la boucle principale
            note -1 = Illimité
            </summary>
        </member>
        <member name="F:Nglib.APP.PROCESS.AppProcessContext.ConfigLoopSleep">
            <summary>
            Temps de pause entre chaque itérations, en millisecondes
            </summary>
        </member>
        <member name="P:Nglib.APP.PROCESS.AppProcessContext.ShowLogInConsole">
            <summary>
            Cacher les logs sur la console
            </summary>
        </member>
        <member name="M:Nglib.APP.PROCESS.AppProcessContext.GetLoopStateText">
            <summary>
            Obtenir le status boucle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.APP.PROCESS.AppProcessContext.LoadConfig(Nglib.DATA.PARAMVALUES.ParamValues)">
            <summary>
            Chargement des paramètres avec datavalue/xml
            </summary>
            <param name="FluxConfig"></param>
        </member>
        <member name="T:Nglib.APP.CONSOLE.ConsoleTools">
            <summary>
            Outils pour System.Console
            </summary>
        </member>
        <member name="M:Nglib.APP.CONSOLE.ConsoleTools.ReadLine(System.Int32)">
            <summary>
            Equivalent au Console.ReadLine avec un timeout 
            </summary>
        </member>
        <member name="M:Nglib.APP.CONSOLE.ConsoleTools.ExecuteCmdCommand(System.String,System.Boolean,System.Int32)">
            <summary>
            Executer une commande DOS/CMD
            </summary>
        </member>
        <member name="M:Nglib.APP.CONSOLE.ConsoleTools.ConsoleTitle(System.String)">
            <summary>
            permet d'écrire un titre
            </summary>
        </member>
        <member name="M:Nglib.APP.CONSOLE.ConsoleTools.ConsoleProgressBar(System.Int32,System.Int32,System.String)">
            <summary>
            Permet d'utiliser une bar de progression dans la console
            </summary>
        </member>
        <member name="M:Nglib.APP.CONSOLE.ConsoleTools.ConsoleReadArgs(System.String[],System.String,System.Int32)">
            <summary>
            Permet la saisie des arguments string[] args
            </summary>
            <param name="args"></param>
            <param name="ArgFormat"></param>
            <param name="SaisieCommandTimeOut"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.APP.CONSOLE.ConsoleTools.ConsoleInfos">
            <summary>
            Affiche des informations dans la console
            </summary>
        </member>
        <member name="M:Nglib.APP.CONSOLE.ConsoleTools.ConvertArgToDictionary(System.String[],System.Char)">
            <summary>
            Permet de convertir les arguments en un dictionary
            séparateur '='
            </summary>
        </member>
        <member name="T:Nglib.APP.ENV.IGlobalEnv">
            <summary>
            Environnement d'execution
            </summary>
        </member>
        <member name="P:Nglib.APP.ENV.IGlobalEnv.Connectors">
            <summary>
            Une liste de connecteurs SGBD
            </summary>
        </member>
        <member name="M:Nglib.APP.ENV.IGlobalEnv.Load">
            <summary>
            (re)Chargement de l'environnement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.APP.ENV.IGlobalEnv.GetConfig(System.String)">
            <summary>
            Obtenir un parametre de la configuration
            </summary>
        </member>
        <member name="T:Nglib.DATA.ACCESSORS.DataAccessorCryptoContext">
            <summary>
            Permet de gérer le chiffrement/déchiffrement des objets dataPO
            </summary>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetRowString(System.Data.DataRow,System.String)">
            <summary>
            Obtenir une donnée d'un datarow et la transformer en string
            </summary>
            <param name="row"></param>
            <param name="nameValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetRowObject(System.Data.DataRow,System.String)">
            <summary>
            Obtenir une donnée d'un datarow 
            </summary>
            <param name="row"></param>
            <param name="nameValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetRowObject(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Obtenir une donnée d'un datarow 
            </summary>
            <param name="row"></param>
            <param name="realColumn"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetColumn(System.Data.DataTable,System.String)">
            <summary>
            Obtient une colonne avec gestion de la casse
            </summary>
            <param name="table"></param>
            <param name="ColumnName"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.hasCellChanged(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Savoir si une colonne à été modifiée
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetChangedColumns(System.Data.DataRow)">
            <summary>
            Liste des colonnes qui ont été modifiées
            </summary>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetChangedColumnNames(System.Data.DataRow)">
            <summary>
            Liste des colonnes qui ont été modifiées
            </summary>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetChangedColumns(System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary>
            Liste des colonnes qui ont été modifiées
            </summary>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetChangedColumnNames(System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary>
            Liste des colonnes qui ont été modifiées
            </summary>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetChangedColumns(System.Data.DataTable)">
            <summary>
            Liste des colonnes qui ont été modifiées
            </summary>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetChangedColumnNames(System.Data.DataTable)">
            <summary>
            Liste des colonnes qui ont été modifiées
            </summary>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetChangedValues(System.Data.DataRow,System.Boolean)">
            <summary>
            Liste des données qui on été modifiée
            </summary>
            <param name="row">row</param>
            <param name="NotReturnKey">ne retournera pas les primarykeys</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetValues(System.Data.DataRow,System.Boolean,System.Boolean)">
            <summary>
            Obtient les données d'un datarow sous forme de dictionnaire
            </summary>
            <param name="row">row</param>
            <param name="getColKeys">retour les primary ou non</param>
            <param name="getColValues">retourne les données autre que primarykey ou non</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetValues(System.Data.DataRow,System.String[])">
            <summary>
            Obtient les données d'un datarow sous forme de dictionnaire
            </summary>
            <param name="row">Données</param>
            <param name="colNames">Selection de colonnes</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.CloneRow(System.Data.DataRow,System.Boolean)">
            <summary>
             Permet de clonner le datarow
            </summary>
            <param name="row">datarow</param>
            <param name="ClonneDataTableToo">Clone l'objet aussi dans une nouvelle table clonée</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.CopyRow(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Permet de copier les données données d'un datarow dans un autres selon les colones
            </summary>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.CloneRowInOtherTable(System.Data.DataRow,System.Data.DataTable)">
            <summary>
            Permet de changer le datatable d'un row
            Clone et recré un datarow avec des données déja présente à l'origine en prenant en compte les contraintes de la nouvelle table
            </summary>
            <param name="orgnRow"></param>
            <param name="NewTable"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.CloneRowsInNewDataTable(System.Data.DataRow[])">
            <summary>
            Permet de clonner les données des datarow en une seule nouvelle datatable
            </summary>
            <param name="datas"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.DefineDataTable(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Data.DataTable)">
            <summary>
            Permet de créer ou définir une table
            </summary>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.CleanDataTableSchema(System.Data.DataTable)">
            <summary>
            Permet de nétoyer une datatable pour la rendre compatible a certaine fonction
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.MergeAddSchema(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Permet d'additionner le schémas tableSource dans tableDest
            </summary>
            <param name="tableDest"></param>
            <param name="tableSource"></param>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.CloneColumn(System.Data.DataColumn)">
            <summary>
            Permet de clonner une colonne
            </summary>
            <param name="colOrgn"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.CreateColumn(System.Data.DataTable,System.String,System.Type,System.Boolean)">
            <summary>
            permet de créer une colonne sur la tables
            </summary>
            <param name="table"></param>
            <param name="nameCol"></param>
            <param name="type"></param>
            <param name="IsKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.DataTableMergeSchemas(System.Data.DataTable[])">
            <summary>
            Permet de fusionner tous les schémas en une table
            </summary>
            <param name="tables"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.DataTableRemoveConstraints(System.Data.DataTable)">
            <summary>
            Supprimer toutes les contraintes sur un datatable
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.SetPrimaryKeys(System.Data.DataTable,System.Data.DataColumn[])">
            <summary>
            définir des colones comme primary key
            en reprenant bien celle de la table si existe déja
            </summary>
            <param name="table"></param>
            <param name="keyColsNames"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.SetPrimaryKeys(System.Data.DataTable,System.String[])">
            <summary>
            définir des colones comme primary key
            Les colonnes doivent déja existées
            </summary>
            <param name="table"></param>
            <param name="keyColsNames"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.SetColumns(System.Data.DataTable,System.Data.DataColumn[])">
            <summary>
            Ajoute de nouvelle colones sur la table si elle existe pas déja
            </summary>
            <param name="table"></param>
            <param name="columns"></param>
            <returns>retournera lse vraie objet des colones sur la table</returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.GetColumns(System.Data.DataTable,System.String[])">
            <summary>
            Obtenir plusieurs colonnes
            </summary>
            <param name="table"></param>
            <param name="colsnames"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.DataTableSplit(System.Data.DataTable,System.Int32)">
            <summary>
            Découpe un datatable en plusieurs datatable et avec clonnage des données
            </summary>
            <param name="retSrc"></param>
            <param name="countbyitem"></param>
            <param name="removeColumn"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.DataTableToDictionaryValues(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Extrait deux données d'une table dans un dictionary
            </summary>
            <param name="ret"></param>
            <param name="ColKey"></param>
            <param name="ColValue"></param>
            <param name="IgnoreDuplicate"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.DataTableToListValues(System.Data.DataTable,System.String)">
            <summary>
            Extrait une données d'une table dans une liste
            </summary>
            <param name="ret"></param>
            <param name="ColKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.DataTableSplitByKey(System.Data.DataTable,System.String)">
            <summary>
            Séparer les tables avec une colones clef
            </summary>
            <param name="ret"></param>
            <param name="ColKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.DataSetTools.DatatableToCSV(System.Data.DataTable,System.String[],System.Boolean)">
            <summary>
             Extraire les données sous forme de CSV
            </summary>
            <param name="dtValuesdata">table</param>
            <param name="colFilters">filtre sur des colonnes</param>
            <param name="WriteHeader">Ajouter un Header</param>
            <returns></returns>
        </member>
        <member name="T:Nglib.DATA.COLLECTIONS.TempDictionary`2">
            <summary>
            Un dictionaire de données avec gestion de la durée de rétention 
            Use ConcurrentDictionary (Safe Thread et Safe nullable)
            </summary>
            <typeparam name="Tkey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.TempDictionary`2.Get(`0,System.Boolean)">
            <summary>
            
            </summary>
            <param name="key">clef</param>
            <param name="ignoreCacheRules">activer ou non la suppression de l'objet si obsolete</param>
            <param name="SafeNullable">ne retournera pas d'erreur su existe pas</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.TempDictionary`2.Set(`0,`1,System.DateTime)">
            <summary>
            Définir une valeur
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="keepTime"></param>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.TempDictionary`2.Set(`0,`1,System.Nullable{System.Int32})">
            <summary>
            Définir une valeur
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="keepTimeSecond"></param>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.TempDictionary`2.CleanAsync">
            <summary>
            CleanUp : Supprimer les élement obsoletes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.COLLECTIONS.TempDictionary`2.OverTime(`0,System.DateTime)">
            <summary>
            Prolongation du temps
            </summary>
            <param name="key">clef</param>
            <param name="expireAt">prolongation du temp</param>
            <returns></returns>
        </member>
        <member name="T:Nglib.DATA.CONNECTOR.ConnectorCollection">
            <summary>
            Liste de connecteurs SQL
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorCollection.GetDefaultConnector">
            <summary>
            Obtient le connecteur principal (DefaultConnection)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nglib.DATA.CONNECTOR.ConnectorConstants.ConnectorEngineEnum">
            <summary>
            SGBD COMPATIBLES NGLIB
            </summary>
        </member>
        <member name="F:Nglib.DATA.CONNECTOR.ConnectorConstants.ConnectorEngineEnum.NA">
            <summary>
            Moteur inconnu
            </summary>
        </member>
        <member name="F:Nglib.DATA.CONNECTOR.ConnectorConstants.ConnectorEngineEnum.POSTGRESQL">
            <summary>
            Serveur postgresql
            </summary>
        </member>
        <member name="F:Nglib.DATA.CONNECTOR.ConnectorConstants.ConnectorEngineEnum.MYSQL">
            <summary>
            MySQL
            </summary>
        </member>
        <member name="F:Nglib.DATA.CONNECTOR.ConnectorConstants.ConnectorEngineEnum.SQLITE">
            <summary>
            SQLITE
            </summary>
        </member>
        <member name="F:Nglib.DATA.CONNECTOR.ConnectorConstants.ConnectorEngineEnum.MSSQL">
            <summary>
            Microsoft SQL Server
            </summary>
        </member>
        <member name="F:Nglib.DATA.CONNECTOR.ConnectorConstants.ConnectorEngineEnum.ACCESS">
            <summary>
            Microsoft ACCESS
            </summary>
        </member>
        <member name="F:Nglib.DATA.CONNECTOR.ConnectorConstants.ConnectorEngineEnum.ORACLE">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="T:Nglib.DATA.CONNECTOR.ConnectorException">
            <summary>
            Exception Spécifique aux Connecteurs SQL (contient la requette SQL)
            </summary>
        </member>
        <member name="T:Nglib.DATA.CONNECTOR.ConnectorGeneric">
            <summary>
            Un dataConnector générique (multiengine) respectant le standard SQL (basé sur postgres)
            Accès aux drivers/dll par reflexion, cela permet de ne pas avoir à référencer toutes les DLL
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.ConnectorGeneric.MultiThreadingSafe">
            <summary>
            Un seul thread pourra ouvrir la connection simultanément (default true)
            </summary>
        </member>
        <member name="F:Nglib.DATA.CONNECTOR.ConnectorGeneric.DefaultTimeOut">
            <summary>
            Time out strandard
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.ConnectorGeneric.EngineName">
            <summary>
            Nom du moteur SGBD
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.ConnectorGeneric.ConnectorName">
            <summary>
            Nom du connecteur
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.ConnectorGeneric.ReadOnly">
            <summary>
            Le connecteur est en mode readOnly
            </summary>
        </member>
        <member name="E:Nglib.DATA.CONNECTOR.ConnectorGeneric.QueryCompleted">
            <summary>
            Event après l'éxecution
            </summary>
        </member>
        <member name="E:Nglib.DATA.CONNECTOR.ConnectorGeneric.QueryBegin">
            <summary>
            Event avant l'éxecution
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorGeneric.#ctor">
            <summary>
            Connecteur SGBD Générique
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorGeneric.SetConnectionString(System.String,System.String)">
            <summary>
            Définir la chaine de connexion
            instanciation du  IDbConnection
            </summary>
            <param name="connectionString"></param>
            <param name="defaultEngine"></param>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorGeneric.Open(System.Boolean)">
            <summary>
            Ouverture de la connection, (que si nécessaire)
            Mutex pour faire attendre les threads
            </summary>
            <param name="keepOpen">Garder la connexion ouverte après la première requette et après les commit/rollback transaction (penser à la fermer)</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorGeneric.Close(System.Boolean)">
            <summary>
            Fermeture de la connection (SAFE)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorGeneric.BeginTransaction(System.String)">
            <summary>
            Ouverture d'une nouvelle transaction SQL (1 par connector)
            </summary>
            <param name="transactionName"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorGeneric.RollBackTransaction(System.Boolean)">
            <summary>
            annulation sql, fermera la connexion si keepOpenMode=false
            </summary>
            <param name="transactionName"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorGeneric.CommitTransaction">
            <summary>
            Valider la transaction
            </summary>
            <param name="safe"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorGeneric.InitCommand(Nglib.DATA.CONNECTOR.QueryContext)">
            <summary>
            Initialisation de la commande, sql et params
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorGeneric.Clone">
            <summary>
            Clonner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorGeneric.Dispose">
            <summary>
            Fermerture
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorGeneric.Canretry(System.Exception,Nglib.DATA.CONNECTOR.QueryContext)">
            <summary>
            retry si nécessaire
            </summary>
            <param name="e"></param>
            <param name="queryContext"></param>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorGeneric.InsertTableAsync(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            Insertion  table (Insert Optimsé en insertion multirows)
            </summary>
            <param name="connector"></param>
            <param name="dataTable"></param>
            <param name="SpecialTimeOut"></param>
            <param name="AutoIncrementColumn"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorGeneric.InsertTableSub(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            Insertion
            </summary>
            <param name="connector"></param>
            <param name="subtabl"></param>
            <param name="SpecialTimeOut"></param>
            <param name="AutoIncrementColumn"></param>
            <returns></returns>
        </member>
        <member name="T:Nglib.DATA.CONNECTOR.ConnectorTools">
            <summary>
            Outils statiques pour les connecteurs
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorTools.FindEngine(System.String)">
            <summary>
            Identification du moteur sql
            </summary>
            <param name="enginename"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.ConnectorTools.ConnectionFactory(System.String)">
            <summary>
            Retourne le IDbConnection par factory de la bonne librairie SGBD
            </summary>
        </member>
        <member name="T:Nglib.DATA.CONNECTOR.IDataConnector">
            <summary>
            Objet pour réaliser des requettes sql
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.IDataConnector.ConnectorName">
            <summary>
            Nom du connecteur
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.IDataConnector.ReadOnly">
            <summary>
            Le connecteur peut être utilisé en lecture seulement
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.IDataConnector.MultiThreadingSafe">
            <summary>
            Les threads ne partagerons pas les connection ouverte.
            Il faudra attendre que la connection soit fermer pour en ouvrir une nouvelle
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.IDataConnector.EngineName">
            <summary>
            Nom du moteur SGBD
            </summary>
        </member>
        <member name="E:Nglib.DATA.CONNECTOR.IDataConnector.QueryCompleted">
            <summary>
            Obtient les context de toutes les requetes arpès l'éxecution
            </summary>
        </member>
        <member name="E:Nglib.DATA.CONNECTOR.IDataConnector.QueryBegin">
            <summary>
            evenement avant l'execution de la requète
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnector.SetConnectionString(System.String,System.String)">
            <summary>
            Définir la chaine de connection
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnector.Open(System.Boolean)">
            <summary>
            Ouvrir la connexion
            </summary>
            <param name="keepOpen">Garder la connexion ouverte après la prochaine requette</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnector.Close(System.Boolean)">
            <summary>
            fermer la connexion (rollbakc si nécessaire)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnector.BeginTransaction(System.String)">
            <summary>
            Ouvrir une transaction SQL
            </summary>
            <param name="transactionName"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnector.RollBackTransaction(System.Boolean)">
            <summary>
            ROLLBACK transaction SQL
            </summary>
            <param name="transactionName"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnector.CommitTransaction">
            <summary>
            Commit transaction SQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnector.GetDbConnection">
            <summary>
            Obtient l'objet connection standard
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnector.QueryDataSetAsync(Nglib.DATA.CONNECTOR.QueryContext)">
            <summary>
            Execution d'une requete classique, qui retourne un Dataset
            </summary>
            <param name="sqlQuery"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnector.QueryScalarAsync(Nglib.DATA.CONNECTOR.QueryContext)">
            <summary>
            Execution d'une requete scalar simple
            </summary>
            <param name="sqlQuery"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnector.InsertTableAsync(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            Insertion d'une table entiere
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nglib.DATA.CONNECTOR.IDataConnectorExtends">
            <summary>
            Extentions de méthodes utiles pour les connecteurs
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnectorExtends.QueryDataSetAsync(Nglib.DATA.CONNECTOR.IDataConnector,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Execution d'une requette SQL, Return Dataset
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnectorExtends.QueryDataSet(Nglib.DATA.CONNECTOR.IDataConnector,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Execution d'une requette SQL, Return Dataset
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnectorExtends.QueryAsync(Nglib.DATA.CONNECTOR.IDataConnector,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Execution d'une requette SQL avec retour de données
            </summary>
            <param name="sqlQuery"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnectorExtends.QueryAsync(Nglib.DATA.CONNECTOR.IDataConnector,System.String,System.Object[])">
            <summary>
            Execution d'une requette SQL avec retour de données
            </summary>
            <param name="connector"></param>
            <param name="sqlQuery"></param>
            <param name="oparameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnectorExtends.Query(Nglib.DATA.CONNECTOR.IDataConnector,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Execution d'une requette SQL avec retour de données
            </summary>
            <param name="connector"></param>
            <param name="sqlQuery"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnectorExtends.QueryScalarAsync(Nglib.DATA.CONNECTOR.IDataConnector,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
             Execution d'une requette SQL
            </summary>
            <param name="connector"></param>
            <param name="sqlQuery"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnectorExtends.QueryScalarAsync(Nglib.DATA.CONNECTOR.IDataConnector,Nglib.DATA.CONNECTOR.SqlBuilder)">
            <summary>
             Execution d'une requette SQL
            </summary>
            <param name="connector"></param>
            <param name="sqlQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnectorExtends.QueryScalarAsync(Nglib.DATA.CONNECTOR.IDataConnector,System.String,System.Object[])">
            <summary>
            Execution d'une requette SQL
            </summary>
            <param name="connector"></param>
            <param name="sqlQuery"></param>
            <param name="oparameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnectorExtends.QueryScalar(Nglib.DATA.CONNECTOR.IDataConnector,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
             Execution d'une requette SQL
            </summary>
            <param name="connector"></param>
            <param name="sqlQuery"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnectorExtends.DeleteAsync(Nglib.DATA.CONNECTOR.IDataConnector,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Query with Delete sql auto build
            </summary>
            <param name="connector"></param>
            <param name="table"></param>
            <param name="parametersKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnectorExtends.UpdateAsync(Nglib.DATA.CONNECTOR.IDataConnector,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Query with Update sql auto build
            </summary>
            <param name="connector"></param>
            <param name="table"></param>
            <param name="parametersKey"></param>
            <param name="parametersValues"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.IDataConnectorExtends.InsertAsync(Nglib.DATA.CONNECTOR.IDataConnector,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Query with insert sql auto build
            </summary>
            <param name="connector"></param>
            <param name="table"></param>
            <param name="parametersValues"></param>
            <param name="AutoIncrementColumn"></param>
            <returns></returns>
        </member>
        <member name="T:Nglib.DATA.CONNECTOR.QueryContext">
            <summary>
            Contient toutes les informations pour le suivis de la requette SQL
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.QueryContext.#ctor">
            <summary>
            Context SQL
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.QueryContext.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            COntext SQL
            </summary>
            <param name="sqlQuery"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.QueryContext.QueryTry">
            <summary>
            Nombre de tentatives
            </summary>
        </member>
        <member name="F:Nglib.DATA.CONNECTOR.QueryContext.watchExecute">
            <summary>
            Temps de chargement de la requette (Hors Open/Close)
            </summary>
        </member>
        <member name="F:Nglib.DATA.CONNECTOR.QueryContext.watchAll">
            <summary>
            Temp total incluant le OPEN/Close
            </summary>
        </member>
        <member name="F:Nglib.DATA.CONNECTOR.QueryContext.InitDate">
            <summary>
            Date d'initialisation de la requette
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.QueryContext.ExecuteDate">
            <summary>
            Date ou le requette à commencer à etre executé
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.QueryContext.sqlQuery">
            <summary>
            Requette SQl complete
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.QueryContext.parameters">
            <summary>
            Parametres
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.QueryContext.error">
            <summary>
            Erreur retour eventuel
            </summary>
        </member>
        <member name="T:Nglib.DATA.CONNECTOR.SqlBuilder">
            <summary>
            Permet de composer une requete SQL
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.SqlBuilder.TableName">
            <summary>
            Nom de la table
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.SqlBuilder.Into">
            <summary>
            Ajout de la commande INTO (SELECT ONLY)
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.SqlBuilder.LimitResults">
            <summary>
            Limitation
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.SqlBuilder.SqlInputParameters">
            <summary>
            Liste des paramètres, données INPUT
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.SqlBuilder.SqlEngine">
            <summary>
            Nom du SGBD
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.SqlBuilder.sqlCommandType">
            <summary>
            Type de commande SELECT
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.SqlBuilder.SqlFieldNames">
            <summary>
            Données pour SELECT/ Insert / Update
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.SqlBuilder.WhereClauses">
            <summary>
            Liste des conditions Where
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.SqlBuilder.OrderClauses">
            <summary>
            Order by clause
            </summary>
        </member>
        <member name="P:Nglib.DATA.CONNECTOR.SqlBuilder.GroupClauses">
            <summary>
            Group By Clause
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlBuilder.Select(System.String[])">
            <summary>
            Prépation d'une requette SELECT
            </summary>
            <param name="fields">Liste des champs, laisser vide pour * </param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlBuilder.Update(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Mise à jour de données en base
            </summary>
            <param name="updateValues"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlBuilder.Delete">
            <summary>
            Supprimer des données
            L'utilisation de AddWhere sera obligatoire
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlBuilder.Insert(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Insert data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlBuilder.AddWhereEqual(System.String,System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="parametername"></param>
            <param name="parameterValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlBuilder.AddWhereClause(System.String,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="sqlpart"></param>
            <param name="parametername"></param>
            <param name="parameterValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlBuilder.AddWhereClause(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="sqlpart"></param>
            <param name="Parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlBuilder.OrderBy(System.String[])">
            <summary>
            Ajoute la clause ORDER BY
            </summary>
            <param name="orderby"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlBuilder.GroupBy(System.String[])">
            <summary>
            Ajoute la clause GROUP BY
            </summary>
            <param name="groupby"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlBuilder.ToString">
            <summary>
            COMPOSE SQL STRING
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nglib.DATA.CONNECTOR.SqlTools">
            <summary>
            Permet d'aider dans la conception d'une requette SQL (remplacer par un sqlbuilder)
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlTools.IsSQLQuery(System.String)">
            <summary>
            Savoir Si il s'agit d'une requette
            </summary>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlTools.ConvertToinsql(System.String)">
            <summary>
            création de ('value1','value2','valueN')
            </summary>
            <param name="chaine">séparateur ;</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlTools.ConvertToinsql(System.Collections.Generic.List{System.String})">
            <summary>
            création de ('value1','value2','valueN')
            </summary>
            <param name="chaine"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlTools.ConvertToinsql(System.Collections.Generic.List{System.Int32})">
            <summary>
            création de (value1,value2,valueN)
            </summary>
            <param name="chaine"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlTools.ConvertToinsql(System.Collections.Generic.List{System.Int64})">
            <summary>
            création de (value1,value2,valueN)
            </summary>
            <param name="chaine"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.CONNECTOR.SqlTools.GenerateSqlMultiInsert(System.Data.DataTable,System.Collections.Generic.List{System.String})">
            <summary>
            Permet de générer un code SQL d'INSERT multilignes
            </summary>
            <param name="datas"></param>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="T:Nglib.DATA.DATAPO.CollectionPO">
            <summary>
            Liste de DataPO
            </summary>
        </member>
        <member name="T:Nglib.DATA.DATAPO.CollectionPO`1">
            <summary>
            Liste de DataPo
            </summary>
            <typeparam name="Tpo"></typeparam>
        </member>
        <member name="F:Nglib.DATA.DATAPO.CollectionPO`1.TotalCountResults">
            <summary>
            Nombre total de resultats disponible sur le serveur
            </summary>
        </member>
        <member name="F:Nglib.DATA.DATAPO.CollectionPO`1.ExecuteTimeElapsed">
            <summary>
            Temps d'execution pour obtenir ce résultat
            </summary>
        </member>
        <member name="P:Nglib.DATA.DATAPO.CollectionPO`1.orgnTable">
            <summary>
            Table d'origine qui as permis d'obtenir les résultats
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.CollectionPO`1.AsValue(System.String,System.String[])">
            <summary>
            Savoir si le résultat contient cette donnée
            </summary>
            <param name="ChampWant"></param>
            <param name="ChampValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.CollectionPO`1.ToDictionaryString(System.String,System.String)">
            <summary>
            Extraction de données dans un dictionary 
            </summary>
            <param name="keyField">Nom du champ clef (supprimera les doublon)</param>
            <param name="valueField">Nom du champ valeur</param>
            <param name="valueDynamic">Utilisera la dynamisation, permet d'obtenir plusieurs champs</param>
            <returns></returns>
        </member>
        <member name="T:Nglib.DATA.DATAPO.DataPO">
            <summary>
            Objet de base utilisant le datarow (ADO.NET)
            </summary>
        </member>
        <member name="F:Nglib.DATA.DATAPO.DataPO.localRow">
            <summary>
            Ce sont les donnees de base du datapo !
            </summary>
        </member>
        <member name="F:Nglib.DATA.DATAPO.DataPO.flows">
            <summary>
            Flux de données noSQl dans une col/table
            </summary>
        </member>
        <member name="F:Nglib.DATA.DATAPO.DataPO._isDefined">
            <summary>
            Le datapo à été chargé proprement avec les clefs et pret à faire des opération insert/update/delete/select
            </summary>
        </member>
        <member name="F:Nglib.DATA.DATAPO.DataPO._isLoaded">
            <summary>
            L'objet à été chargé par un autre datarow
            </summary>
        </member>
        <member name="P:Nglib.DATA.DATAPO.DataPO.CryptoContext">
            <summary>
            Parametre pour encrypter les données
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPO.#ctor">
            <summary>
            constructeur vide
            </summary>
        </member>
        <member name="P:Nglib.DATA.DATAPO.DataPO.Item(System.String,System.Boolean)">
            <summary>
            Accès aux données
            </summary>
            <param name="nameValue"></param>
            <param name="isLegalCreateColIfNotExist"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPO.GetRow(System.Boolean)">
            <summary>
            Obtient le datarow de l'objet
            Initialisera l'objet si il n'a pas été initialisé ou chargé déja
            </summary>
            <param name="RefreshFlow">Refrachit les champs qui contienne les flux nosql</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPO.SetRow(System.Data.DataRow)">
            <summary>
            Définit le datarow dans l'objet
            </summary>
            <param name="row">L'objet de données</param>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPO.InitSchema">
            <summary>
            Permet d'initialiser le schema du datapo (col,keys,tablename, ...)
            Il faut l'overider ensuite il sera executé automatiquement
            </summary>
            <returns>Retournera le Schema de l'objet en question</returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPO.GetDataPOFlow(System.String)">
            <summary>
            Obtient un flow de données nosql
            </summary>
            <typeparam name="Tflow"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPO.GetOrDefineFlow``1(System.String,Nglib.DATA.ACCESSORS.FlowTypeEnum,System.Boolean)">
            <summary>
            Obtient un flow de données nosql existant ou le crée
            </summary>
            <typeparam name="Tflow"></typeparam>
            <param name="fieldName"></param>
            <param name="fieldType"></param>
            <param name="FullEncrypted">Le champs xml/json est totalement crypté en text en base</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPO.GetData(System.String,Nglib.DATA.ACCESSORS.DataAccessorOptionEnum)">
            <summary>
            Obtient un Objet (du datarow, fluxxml ou des objets liés)
            méthode principale
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPO.SetData(System.String,System.Object,Nglib.DATA.ACCESSORS.DataAccessorOptionEnum)">
            <summary>
            Défini un objet
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPO.IsInDataBase">
            <summary>
            Permet de déterminer si l'objet est présent en base de données ou si il faut faire un insert
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPO.AcceptChanges">
            <summary>
            Marque pour toutes les données que les changements ont été pris en comptes
            </summary>
            <returns>retourne si un changement était présent</returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPO.GetCryptoContext">
            <summary>
            obtenir le context de cryptage de l'objet
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPO.SetCryptoOptions(Nglib.DATA.ACCESSORS.IDataAccessorCryptoContext)">
            <summary>
            définir le context de cryptage de l'objet
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPO.GetCryptoIV">
            <summary>
            obtient un vecteur d'initialisation unique pour l'objet
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nglib.DATA.DATAPO.DataPOJsonConverter`1">
            <summary>
            Classe de conversion spécifique pour retourner l'objet intégral 
            A COPIER DANS NGLIB !!!
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOJsonConverter`1.WriteDictionary(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Ecrire un dictionary amélioré
            </summary>
            <param name="writer"></param>
            <param name="datas"></param>
        </member>
        <member name="T:Nglib.DATA.DATAPO.DataPOProviderSQL`1">
            <summary>
            manipulation des dataPo en base
            </summary>
            <typeparam name="Tobj">DataPO</typeparam>
        </member>
        <member name="T:Nglib.DATA.DATAPO.DataPOProviderSQL">
            <summary>
            manipulation des dataPo en base
            </summary>
        </member>
        <member name="F:Nglib.DATA.DATAPO.DataPOProviderSQL.Connectors">
            <summary>
            Liste des connecteurs/serveurs disponibles
            </summary>
        </member>
        <member name="F:Nglib.DATA.DATAPO.DataPOProviderSQL.DisableAcceptChange">
            <summary>
            Permet de désactiver les acceptchange lors des Update,insert : pratique pour le inmemory
            </summary>
        </member>
        <member name="P:Nglib.DATA.DATAPO.DataPOProviderSQL.Connector">
            <summary>
            Connecteur principal avec le SGBD
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.#ctor">
            <summary>
            manipulation des dataPo en base
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.#ctor(Nglib.DATA.CONNECTOR.IDataConnector)">
            <summary>
            manipulation des dataPo en base
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.#ctor(Nglib.DATA.CONNECTOR.ConnectorCollection)">
            <summary>
            manipulation des dataPo en base
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.#ctor(Nglib.APP.ENV.IGlobalEnv)">
            <summary>
            manipulation des dataPo en base
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.GetPOWithB36keyAsync``1(System.String)">
            <summary>
            Obtient le premier enregistrement 
            </summary>
            <typeparam name="Tobj"></typeparam>
            <param name="idIncrement"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.GetFirstPO``1(System.Int64)">
            <summary>
            Obtient le premier enregistrement 
            </summary>
            <typeparam name="Tobj"></typeparam>
            <param name="idIncrement"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.GetFirstPO``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Obtient le premier enregistrement avec ces clefs
            </summary>
            <typeparam name="Tobj"></typeparam>
            <param name="paramKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.GetCollectionPO``1(System.String,System.Object[])">
            <summary>
            OBtient une liste d'objets
            </summary>
            <typeparam name="Tobj"></typeparam>
            <param name="SqlQuery"></param>
            <param name="insparam"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.GetCollectionPO``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Obtient une liste d'objets
            </summary>
            <typeparam name="Tobj"></typeparam>
            <param name="SqlQuery"></param>
            <param name="paramKeySearch"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.SavePOAsync(Nglib.DATA.DATAPO.DataPO[],System.Boolean)">
            <summary>
            Mettre à jour (update only) des objets en base
            </summary>
            <param name="bubbles">DataPos</param>
            <param name="ForceEvenIfNotModified">Force la mise à jours de tous les champs même si il n'ont pas été modifié</param>
            <returns>Modification effectué</returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.SavePo_LineByLinesAsync(System.Collections.Generic.List{Nglib.DATA.DATAPO.DataPO},System.Boolean)">
            <summary>
            Execute plusieurs Save en une requette
            </summary>
            <param name="bubblesNeedToSave"></param>
            <param name="ForceEvenIfNotModified"></param>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.UpdatePOAsync(Nglib.DATA.DATAPO.DataPO[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Mettre à jours plusieurs objets en même temps avec les mêmes valeurs
            </summary>
            <param name="bubbles"></param>
            <param name="valeursParameters"></param>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.UpdatePOAsync(Nglib.DATA.DATAPO.DataPO[],System.String,System.Object)">
            <summary>
            Mettre à jours plusieurs objets en même temps avec les mêmes valeurs
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.InsertPOAsync(Nglib.DATA.DATAPO.DataPO[])">
            <summary>
            Insertion de du dataPo en base
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOProviderSQL.DeletePOAsync(Nglib.DATA.DATAPO.DataPO[])">
            <summary>
            Supprimer un objet en base
            </summary>
            <param name="bubble"></param>
        </member>
        <member name="T:Nglib.DATA.DATAPO.DataPOTools">
            <summary>
            Outil pour les objets DATAPO
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.Create``1(System.Data.DataRow)">
            <summary>
            Création d'un nouvel objet
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.CreateFirst``1(System.Data.DataTable)">
            <summary>
            Création d'un nouvel objet (le premier de la table)
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.IsChanges(Nglib.DATA.DATAPO.DataPO)">
            <summary>
            Présence de changements
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.GetValues(Nglib.DATA.DATAPO.DataPO,System.Boolean,System.Boolean)">
            <summary>
            Obtientir les données du DataPO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.GetValues(Nglib.DATA.DATAPO.DataPO,System.String[])">
            <summary>
            Obtientir les données du DataPO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.SetValues(Nglib.DATA.DATAPO.DataPO,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Définit les valeur dans le datarow dans l'objet
            </summary>
            <param name="row">L'objet de données</param>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.GetDeclaredValues(Nglib.DATA.DATAPO.DataPO)">
            <summary>
            Obtient toute les valeurs des propriétées déclarées dans la classe (PAR REFLEXION)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.CloneDataTable(Nglib.DATA.DATAPO.DataPO[])">
            <summary>
            Permet de clonner les données des datarow en une seule datatable
            </summary>
            <param name="datas"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.CopyProperties(System.Object,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Permet de copier les propriété d'un PO dans un objet (need dev !!!)
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.LoadFromDataTable``1(System.Collections.Generic.IList{``0},System.Data.DataTable)">
            <summary>
            Permet de charger une table dans une liste de PO
            </summary>
            <typeparam name="Tpo"></typeparam>
            <param name="listPO"></param>
            <param name="table"></param>
        </member>
        <member name="F:Nglib.DATA.DATAPO.DataPOTools.TablePoSchemasCache">
            <summary>
            Liste des structures de table en cache pour ne pas pas avoir à les recréer au moment de créer des PO
            Par contre, il est interdit d'y attacher les datarow, c'est seulement pour avoir la structure
            Donc après l'insert l'objet sera attaché sur un autre objet table clonner a partir de celui la
            </summary>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.DefineSchemaPO(Nglib.DATA.DATAPO.DataPO,System.Boolean)">
            <summary>
            Permet de preparer l'objet (notament définir le datarow et son schema)
            C'est nécessaire pour les opérations SQL, ou l'instanciation vide d'un DATAPO
            </summary>
            <param name="po"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.DefineSchemaPO(Nglib.DATA.DATAPO.DataPO,System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
            <summary>
            Permet de définir directement  la structure de la table pour ce datarow, création d'une nouvelle si elle existe pas
            Ne fonctionnera
            </summary>
            <param name="nameTable"></param>
            <param name="ColsKeys"></param>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.DefineSchemaPO(Nglib.DATA.DATAPO.DataPO,System.Data.DataTable,System.Boolean,System.Boolean)">
            <summary>
            Permet de définir directement la structure du PO (Un nouveau Row a partir de la nouvelle table)
            </summary>
            <param name="po"></param>
            <param name="table"></param>
            <param name="AllowKeepOriginalRow">Si il y as déja un datarow avec des données, on préserve les données dans la nouvelle Table</param>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.IsDefinedSchema(Nglib.DATA.DATAPO.DataPO)">
            <summary>
            Savoir si le datapo à été correctement défini pour des actions SQL
            </summary>
            <param name="po"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOTools.SetSchemaInCache(System.Type,System.Data.DataTable,System.Boolean)">
            <summary>
            Enregistrer le schema/structure de l'objet PO dans le cache
            </summary>
            <param name="po"></param>
            <param name="table"></param>
            <param name="replace"></param>
        </member>
        <member name="M:Nglib.DATA.DATAPO.DataPOToolsPlus.ToDynamicDictionaryString(Nglib.DATA.DATAPO.ICollectionPO,System.String,System.String)">
            <summary>
            Extraction de données dans un dictionary 
            </summary>
            <param name="keyField">Nom du champ clef (supprimera les doublon)</param>
            <param name="valueField">Nom du champ valeur</param>
            <param name="valueDynamic">Utilisera la dynamisation, permet d'obtenir plusieurs champs</param>
            <returns></returns>
        </member>
        <member name="T:Nglib.DATA.DATAPO.DataPOWithAccessors">
            <summary>
            Objet de base utilisant le datarow
            DataPO avec les accesseurs de bases
            </summary>
        </member>
        <member name="T:Nglib.DATA.DATAPO.ICollectionPO">
            <summary>
            Liste de dataPO
            </summary>
        </member>
        <member name="T:Nglib.DATA.DATAPO.IDataPO">
            <summary>
                I DATAPO
            </summary>
        </member>
        <member name="T:Nglib.DATA.PARAMVALUES.ParamValues">
            <summary>
            Dictionary avancé généralement utilisé pour le paramétrage / mode Clef-Valeur
            </summary>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.#ctor(System.String)">
            <summary>
            Creer une liste de données
            Peut etre stocker dans la bdd, xml, ...
            </summary>
            <param name="name">nom du datadoc (facultatif mais obligatoire pour sérialisation XML)</param>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.GetDataValuesName">
            <summary>
            Obtenir le nom du datavalue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.SetDataValuesName(System.String)">
            <summary>
            Définir le nom du datavalue
            </summary>
            <param name="dvname"></param>
        </member>
        <member name="P:Nglib.DATA.PARAMVALUES.ParamValues.Item(System.String)">
            <summary>
            Obtenir un parametre (null = delete)
            </summary>
        </member>
        <member name="P:Nglib.DATA.PARAMVALUES.ParamValues.Item(System.String,System.String)">
            <summary>
            Obtenir l'Attribut d'un paramètre
            </summary>
            <param name="ise"></param>
            <param name="nameAttribut"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.Remove(System.String)">
            <summary>
            Efface une donnée
            </summary>
            <param name="name">nom de l'élément</param>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.Add(Nglib.DATA.PARAMVALUES.ParamValuesNode)">
            <summary>
            ajoute une donnée pure
            </summary>
            <param name="name">nom de l'élément</param>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.SetData(System.String,System.Object,Nglib.DATA.ACCESSORS.DataAccessorOptionEnum)">
            <summary>
            Ajouter un objet
            </summary>
            <param name="nameValue"></param>
            <param name="obj"></param>
            <param name="AccesOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.GetList">
            <summary>
            Récupère une liste de tuotes les Dta_Values contenues dans le dataStore
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.GetDatasWithAttribut(System.String,System.Boolean)">
            <summary>
            Obtient tous les data qui contien l'attribut 'attributname'
            </summary>
            <param name="attributname"></param>
            <param name="replacenameparattribut"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.GetDatas(System.String,System.Boolean)">
            <summary>
            Obtenir les sous données
            </summary>
            <param name="childrensOf"></param>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.Clone">
            <summary>
            Creer une liste de données
            </summary>
            <param name="dodoc">autre datadoc, Ne link pas les données, il recopie intégralement l'objet</param>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.Clear">
            <summary>
            Delete liste
            </summary>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.Count">
            <summary>
            taille liste, nb elements
            </summary>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.Sort">
            <summary>
            Trier la liste (Remplace le dictonary par sorteddictonary)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.IsChanges">
            <summary>
            Présence de changements
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.AcceptChanges">
            <summary>
            Marque pour toutes les données que les changements ont été pris en comptes
            </summary>
            <returns>retourne si un changement était présent</returns>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.GetCryptoContext">
            <summary>
            obtenir le context de cryptage de l'objet
            </summary>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValues.SetCryptoOptions(Nglib.DATA.ACCESSORS.IDataAccessorCryptoContext)">
            <summary>
            définir le context de cryptage de l'objet
            </summary>
        </member>
        <member name="P:Nglib.DATA.PARAMVALUES.ParamValuesNode._fullname">
            <summary>
            Nom
            </summary>
        </member>
        <member name="P:Nglib.DATA.PARAMVALUES.ParamValuesNode._value">
            <summary>
            Données brut
            </summary>
        </member>
        <member name="F:Nglib.DATA.PARAMVALUES.ParamValuesNode.ChangedState">
            <summary>
            Si la valeur à été modifiée
            </summary>
        </member>
        <member name="F:Nglib.DATA.PARAMVALUES.ParamValuesNode.Attributs">
            <summary>
            Sous valeurs
            </summary>
        </member>
        <member name="F:Nglib.DATA.PARAMVALUES.ParamValuesNode.datavalues_parent">
            <summary>
            Obtient l'objet DATAVALUES parent si il existe
            </summary>
        </member>
        <member name="P:Nglib.DATA.PARAMVALUES.ParamValuesNode.DataType">
            <summary>
            Type de la données demandé (Différent du vrai type de la donnée)
            datatype='string'  int,datetime,bool,...
            </summary>
        </member>
        <member name="P:Nglib.DATA.PARAMVALUES.ParamValuesNode.Name">
            <summary>
            Obtient le nom complet
            </summary>
        </member>
        <member name="P:Nglib.DATA.PARAMVALUES.ParamValuesNode.NodeName">
            <summary>
            Permet d'obtenir le nom simple /param/nom -> nom
            </summary>
        </member>
        <member name="P:Nglib.DATA.PARAMVALUES.ParamValuesNode.Value">
            <summary>
            obtient la données
            </summary>
        </member>
        <member name="P:Nglib.DATA.PARAMVALUES.ParamValuesNode.Item(System.String)">
            <summary>
            Obtient ou définit un attribut string. une valeur null détruira l'attribut 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValuesNode.Fusion(Nglib.DATA.PARAMVALUES.ParamValuesNode,System.Boolean)">
            <summary>
            Attention ne copie pas le nom
            </summary>
            <param name="dataext"></param>
            <param name="ecraser"></param>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValuesNode.Clone">
            <summary>
            Clone dans de nouveaux objets
            </summary>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValuesNode.GetData(System.String,Nglib.DATA.ACCESSORS.DataAccessorOptionEnum)">
            <summary>
            Accessor sur les attributs
            </summary>
            <param name="nameValue"></param>
            <param name="AccesOptions"></param>
            <returns></returns>
        </member>
        <member name="P:Nglib.DATA.PARAMVALUES.ParamValuesNodeHierarchical.NodePath">
            <summary>
            Chemin complet
            </summary>
        </member>
        <member name="P:Nglib.DATA.PARAMVALUES.ParamValuesNodeHierarchical.NodeName">
            <summary>
            Nom du node
            </summary>
        </member>
        <member name="P:Nglib.DATA.PARAMVALUES.ParamValuesNodeHierarchical.ValueNode">
            <summary>
            Noeud avec une valeur
            </summary>
        </member>
        <member name="P:Nglib.DATA.PARAMVALUES.ParamValuesNodeHierarchical.ChildrenNodes">
            <summary>
            Sous noeuds (sans valeur)
            </summary>
        </member>
        <member name="T:Nglib.DATA.PARAMVALUES.ParamValuesPOFlux">
            <summary>
            Représente un champ flux (JSON ou XML) dans la base
            </summary>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValuesPOFlux.SerializeField">
            <summary>
            Serialisation du FLUX ToFlux
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValuesPOFlux.DeSerializeField(System.String)">
            <summary>
            Deserialisation, FromFlux
            </summary>
            <param name="fluxContent"></param>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValuesSerializerXml.SerializeToFile(Nglib.DATA.PARAMVALUES.ParamValues,System.String)">
            <summary>
            Enregistre la liste dans un fichier config xml
            </summary>
            <param name="fichierXML"></param>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValuesSerializerXml.Serialize(Nglib.DATA.PARAMVALUES.ParamValues)">
            <summary>
            Enregistre la liste dans un fichier config xml
            </summary>
            <param name="fichierXML"></param>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValuesSerializerXml.DeSerialize(System.String,Nglib.DATA.PARAMVALUES.ParamValues)">
            <summary>
            Datavalue fromc onfig flux string xml
            </summary>
            <param name="fichierXML"></param>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValuesSerializerXml.fromXML(Nglib.DATA.PARAMVALUES.ParamValues,System.String)">
            <summary>
            Datavalue from fichier config xml
            </summary>
            <param name="fichierXML"></param>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValuesTools.ToFlux(Nglib.DATA.PARAMVALUES.ParamValues,System.Boolean)">
            <summary>
            Exporter un flux du datavalue
            </summary>
            <param name="datavalue"></param>
            <param name="Xml">true=xml, false=json</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.DATA.PARAMVALUES.ParamValuesTools.FromFlux(Nglib.DATA.PARAMVALUES.ParamValues,System.String,System.Nullable{System.Boolean})">
            <summary>
            Chargement d'un flux(Json/Ou XML) dans le datavalue
            </summary>
            <param name="itemdv"></param>
            <param name="flux"></param>
        </member>
        <member name="T:Nglib.FILES.FileTools">
            <summary>
            Outils génériques pour la gestion de fichiers
            </summary>
        </member>
        <member name="M:Nglib.FILES.FileTools.FormatNameFile(System.String)">
            <summary>
            transforme une chaine pour un file path
            </summary>
            <param name="chaine"></param>
            <returns></returns>
        </member>
        <member name="T:Nglib.FILES.SERIAL.CsvTools">
            <summary>
            Outils pour gérer un flux CSV
            </summary>
        </member>
        <member name="M:Nglib.FILES.SERIAL.CsvTools.GetHeaderLine``1(``0)">
            <summary>
            Header Line ;;;
            </summary>
        </member>
        <member name="M:Nglib.FILES.SERIAL.CsvTools.SplitCsv(System.String,System.Boolean,System.Boolean)">
            <summary>
            permet de découper une chaine CSV
            </summary>
        </member>
        <member name="M:Nglib.FILES.SERIAL.CsvTools.SplitTags(System.String)">
            <summary>
            Permet de découper et simplifié la chaine, Separateur csv ';';
            Utilisé pour la gestion des tags, vides interdit
            </summary>
        </member>
        <member name="T:Nglib.FILES.SERIAL.JsonOldTools">
            <summary>
            Utilitaires JSON
            </summary>
        </member>
        <member name="M:Nglib.FILES.SERIAL.JsonOldTools.Serialize(System.Object)">
            <summary>
            Permet de lancer la sérialisation d'un objet Meme si absence de DLL System.Text.Json
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.FILES.SERIAL.JsonOldTools.SerializeDictionaryValues(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Serialisation Simple sans utilisation de DLL exterieure
            </summary>
        </member>
        <member name="T:Nglib.FILES.SERIAL.XmlTools">
            <summary>
            Utilitaires XML
            </summary>
        </member>
        <member name="M:Nglib.FILES.SERIAL.XmlTools.PrintFriendlyXML(System.String)">
            <summary>
            Affiche un Xml proprement indenté
            </summary>
            <param name="XML"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.FILES.SERIAL.XmlTools.IsValidForXMLNodeName(System.String)">
            <summary>
            Chaine valide pour un nom de noeud XML
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Nglib.FORMAT.CryptHashTools">
            <summary>
            Outils de cryptages string
            </summary>
        </member>
        <member name="M:Nglib.FORMAT.CryptHashTools.Hash(System.String,Nglib.SECURITY.CRYPTO.HashModeEnum)">
            <summary>
            Hash string (password, ...)  UTF8 => HASH
            </summary>
            <param name="origine">chaine origine</param>
            <param name="mode">SHA256 ou UTF8</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.FORMAT.CryptHashTools.Encrypt(System.String,Nglib.SECURITY.CRYPTO.ICryptoOption)">
            <summary>
            Encrypter une chaine de caratère
            </summary>
            <param name="input">text value</param>
            <param name="cryptoInformation">informations de cryptage</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.FORMAT.CryptHashTools.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypter une chaine de caratère
            </summary>
            <param name="input">Chaine à crypter</param>
            <param name="passwordtext">mot de passe (ajoutera un hashage)</param>
            <param name="initializationVector">IV pour rendre unique le cryptage</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.FORMAT.CryptHashTools.Decrypt(System.String,Nglib.SECURITY.CRYPTO.ICryptoOption)">
            <summary>
            Décrypter une chaine de caractère
            </summary>
            <param name="input">text value</param>
            <param name="cryptoInformation">informations de cryptage</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.FORMAT.CryptHashTools.Decrypt(System.String,System.String,System.String)">
            <summary>
            Décrypter une chaine de caractère
            </summary>
            <param name="input">text value</param>
            <param name="passwordtext">Mode de passe (ajoutera un hashage)</param>
            <param name="initializationVector">Vecteur d'initialisation</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.FORMAT.CryptHashTools.IntegerToHexString(System.Int32)">
            <summary>
            Convert Integer to hex string.
            </summary>
            <param name="input">The input.</param>
            <returns>Hexadecimal equivalent of input</returns>
        </member>
        <member name="M:Nglib.FORMAT.KeyCoreTools.StringSignValidate(System.String,System.String)">
            <summary>
                Valider une signature HMACSHA256 avec expiration (SAFE)
            </summary>
        </member>
        <member name="M:Nglib.FORMAT.KeyCoreTools.StringSignGenerate(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
                Ajoute une signature ([...].Sxxxxxx) à une chaine de caractères.
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListAddressLine">
            <summary>
            Filter Address Line
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListAlpha">
            <summary>
            Alpha (upper and lower) characters
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListAlphanumeric">
            <summary>
            Alpha-numeric characters
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListDecimal">
            <summary>
            Numeric plus negative and decimal point
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListEmailAddress">
            <summary>
            Lowercase + numeric + period + @
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListGeneralText">
            <summary>
            General text characters
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListGuidString">
            <summary>
            Guid Input
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListInteger">
            <summary>
            Integer characters
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListIPAddress">
            <summary>
            IP Address characters
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListLowercase">
            <summary>
            Lower case characters
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListName">
            <summary>
            Characters for name (including space)
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListPassword">
            <summary>
            Password characters
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListPostCode">
            <summary>
            Characters in post codes
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListSpecial">
            <summary>
            Special characters
            </summary>
            <remarks>This list is subject to change owing to 
            what might or might not be acceptable in a password.</remarks>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListTelephone">
            <summary>
            Telephone characters
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListTime">
            <summary>
            Time characters
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListUnsignedInteger">
            <summary>
            Numeric characters
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListUppercase">
            <summary>
            Upper Case Characters
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListUrl">
            <summary>
            URL characters
            </summary>
        </member>
        <member name="F:Nglib.FORMAT.MORE.StringFilters.FilterListUserName">
            <summary>
            User name characters
            </summary>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterAddressLine(System.String)">
            <summary>
            Filter address line
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterAddressLineTryParse(System.String,System.String@)">
            <summary>
            Filter address line
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterAddressLineNoBoxTryParse(System.String,System.String@)">
            <summary>
            Filter address line and reject box numbers
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid </returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterAlpha(System.String)">
            <summary>
            Filter Alpha (upper + lower case) Values
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterAlphaTryParse(System.String,System.String@)">
            <summary>
            Try Filter Alpha (upper + lower case) Values
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterAlphanumeric(System.String)">
            <summary>
            Filter AlphaNumeric (upper + lower + integer) Values
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterAlphanumericTryParse(System.String,System.String@)">
            <summary>
            Try Filter AlphaNumeric (upper + lower + integer) Values
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterDecimal(System.String)">
            <summary>
            Filter Decimal Values
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterDecimalTryParse(System.String,System.String@)">
            <summary>
            Filter Decimal Values
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterEmailAddress(System.String)">
            <summary>
            Filter EmailAddress case
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterEmailAddressTryParse(System.String,System.String@)">
            <summary>
            Filter EmailAddress case
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterGeneralText(System.String)">
            <summary>
            Filter general text
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
            <remarks>These filter functions are built upon the premise: "All input is evil".
            These functions filter input to a range of permitted values controlled by   
            appropriate constants. By defining the allowed values within string constants
            the allowed values can readily be changed.
            Input is usually from a text box but could also be an argument from the query string.
            When working with non-English languages the General Text will need to be rewritten
            on an exclude basis.
            The filter functions filter on a permitted values basis - Thus <see cref="M:Nglib.FORMAT.MORE.StringFilters.FilterDecimal(System.String)"/>
            would pass the second decimal point in "1.22.2".
            </remarks>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterGeneralTextTryParse(System.String,System.String@)">
            <summary>
            Filter general text
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterGuidString(System.String)">
            <summary>
            Filter Guid String
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterGuidStringTryParse(System.String,System.String@)">
            <summary>
            Filter Guid String
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterHtmlText(System.String)">
            <summary>
            Filters the HTML markup text.
            </summary>
            <param name="input">The input string.</param>
            <returns>Text between the markup</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterInteger(System.String)">
            <summary>
            Filter Integer Values
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterIntegerTryParse(System.String,System.Int32@)">
            <summary>
            Filter Integer Values
            </summary>
            <param name="input">Input to filter</param>
            <param name="result">String Filtered and convert</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterIntegerTryParse(System.String,System.String@)">
            <summary>
            Filter Integer Values
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterIPAddress(System.String)">
            <summary>
            Filter IP Address Values
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterIPAddressTryParse(System.String,System.String@)">
            <summary>
            Filter IP Address Values
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterLowercase(System.String)">
            <summary>
            Filter lower case
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterLowercaseTryParse(System.String,System.String@)">
            <summary>
            Filter lower case
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterName(System.String)">
            <summary>
            Filter Name (with space or hyphen)
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterNameTryParse(System.String,System.String@)">
            <summary>
            Filter Name (with space or hyphen)
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterPassword(System.String)">
            <summary>
            Filter Password (upper + lower case + special) Values
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterPasswordTryParse(System.String,System.String@)">
            <summary>
            Try Filter Password (upper + lower case + special) Values
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterPostcode(System.String)">
            <summary>
            Filter Postcode (text forced to upper case)
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterPostcodeTryParse(System.String,System.String@)">
            <summary>
            Filter Postcode (text forced to upper case)
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterSpecial(System.String)">
            <summary>
            Filter Special characters (text forced to lower case)
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterSpecialTryParse(System.String,System.String@)">
            <summary>
            Filter Special characters (text forced to lower case)
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterTelephone(System.String)">
            <summary>
            Filter Telephone (text forced to lower case)
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterTelephoneTryParse(System.String,System.String@)">
            <summary>
            Filter Telephone (text forced to lower case)
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterTime(System.String)">
            <summary>
            FilterTime (00:00 or 00:00:00 format)
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterTimeTryParse(System.String,System.String@)">
            <summary>
            <see cref="M:Nglib.FORMAT.MORE.StringFilters.FilterTime(System.String)"/> (00:00 or 00:00:00 format)
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterUnsignedInteger(System.String)">
            <summary>
            Filter UnsignedInteger Values
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterUnsignedIntegerTryParse(System.String,System.Int32@)">
            <summary>
            Filter Unsigned Integer Values
            </summary>
            <param name="input">Input to filter</param>
            <param name="result">String Filtered and convert</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterUnsignedIntegerTryParse(System.String,System.String@)">
            <summary>
            Filter Unsigned Integer Values
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterUppercase(System.String)">
            <summary>
            Filter upper case
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterUppercaseTryParse(System.String,System.String@)">
            <summary>
            Filter upper case
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterUrl(System.String)">
            <summary>
            Filter URL 
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
            <remarks>
            The absence of an initial http:// or https:// does not constitute an
            error, but an http:// is silently prepended if one is absent.
            Positional validity is not currently included.
            </remarks>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterUrlTryParse(System.String,System.String@)">
            <summary>
            Filter URL 
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
            <remarks>
            The absence of an initial http:// or https:// does not constitute an
            error, but an http:// is silently prepended if one is absent.
            Positional validity is not currently included.
            </remarks>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterUserName(System.String)">
            <summary>
            Filter user name (and force to upper case)
            </summary>
            <param name="input">Input to filter</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterUserNameTryParse(System.String,System.String@)">
            <summary>
            Filter user name (and force to upper case)
            </summary>
            <param name="input">Input to filter</param>
            <param name="output">Filtered string</param>
            <returns>True if input is valid</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterWorker(System.String,System.String)">
            <summary>
            Filter Worker
            </summary>
            <param name="input">Input to filter</param>
            <param name="validChars">White list of allowed characters</param>
            <returns>Filtered string</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.FilterWorkerTry(System.String,System.String,System.String@)">
            <summary>
            Filter worker try action
            </summary>
            <param name="input">The input string</param>
            <param name="validChars">The string of valid characters</param>
            <param name="output">The output string.</param>
            <returns>True if data passed</returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.HasAdjacentCharacters(System.String,System.Int32)">
            <summary>
            Determines whether the input has adjacent characters the same.
            </summary>
            <param name="input">The string to test (<see langword="null"/> treated as empty string).</param>
            <param name="maximumAllowed">The number of repeats allowable (negative values set to 0).</param>
            <returns>
            <c>true</c> if [is repeated character] [the specified input]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.HasRepeatedCharacters(System.String,System.Int32)">
            <summary>
            Determines whether the input has repeated characters.
            </summary>
            <param name="input">The input.</param>
            <param name="maximumAllowed">The number of repeats allowable (minimum value 1).</param>
            <returns>
                <c>true</c> if [has repeated characters] [the specified input]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nglib.FORMAT.MORE.StringFilters.HasRepeatedCharacters(System.String,System.Int32,System.String)">
            <summary>
            Determines whether the input has repeated characters.
            </summary>
            <param name="input">The input.</param>
            <param name="maximumAllowed">The number of repeats allowable (minimum value 1).</param>
            <param name="lookup">Characters to lookup</param>
            <returns>
               <c>true</c> if [has repeated characters] [the specified input]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nglib.FORMAT.StringMoreTools.StripTags(System.String,System.String[])">
            <summary>
                Permet de supprimer les balises d'une chaine de caratères
            </summary>
            <param name="orgnStr">Chaine d'origine</param>
            <param name="pTagsToStrip">tag spécifique seulements</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.FORMAT.StringMoreTools.LevenshteinCompare(System.String,System.String)">
            <summary>
            La distance Levenshtein est définie comme le nombre minimal de caractères qu'il faut remplacer, insérer ou supprimer pour transformer la chaîne str1 en str2.
            </summary>
            <param name="S1"></param>
            <param name="S2"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.FORMAT.StringMoreTools.GetInitials(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the initials of each word in a string. Words must be separated with spaces.
            </summary>
            <param name="input">The original string.</param>
            <param name="capitalizeInitials">True to capitalize each initial in the output string.</param>
            <param name="preserveSpaces">True to preserver the spaces between initials in the output string.</param>
            <param name="includePeriod">True to include a '.' after each intiali</param>
        </member>
        <member name="M:Nglib.FORMAT.StringMoreTools.Capitalize(System.String)">
            <summary>
            Capitalizes the first character in a string.
            </summary>
        </member>
        <member name="M:Nglib.FORMAT.StringMoreTools.GetTitle(System.String,System.String)">
            <summary>
            Returns a string with each word's first character capitalized. Words are separated according to the sepecified string sequence.
            </summary>
            <param name="input">The original string.</param>
            <param name="separator">The string sequence that separates words.</param>
        </member>
        <member name="M:Nglib.FORMAT.StringMoreTools.Reverse(System.String)">
            <summary>
            Returns a string with characters in reverse order.
            </summary>
        </member>
        <member name="T:Nglib.FORMAT.StringTransform">
            <summary>
            Permet de dynamiser/transformer/valider une chaine de caractères selon une configuration
            </summary>
        </member>
        <member name="M:Nglib.FORMAT.StringTransform.Transform(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Transformer et valider une chaine selon une série d'inscrutions
            </summary>
            <param name="orgnString"></param>
            <param name="transformFuctions"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.FORMAT.StringTransform.SplitString(System.String,Nglib.DATA.PARAMVALUES.ParamValues,System.String)">
            <summary>
            Permet de découper une chaine
            </summary>
        </member>
        <member name="M:Nglib.FORMAT.StringTransform.Dynamise(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            permet de remplacer des bout de chaine par des champs contenu dans les accessors
            </summary>
            <param name="orgnString"></param>
            <param name="Accessors"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.FORMAT.StringTransform.Transform_trim(Nglib.FORMAT.StringTransform.StringDynamizerContext)">
            <summary>
             Permet de supprimer les blancs sur la chaine
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nglib.FORMAT.ValidateTools.IsValid(System.String,System.String)">
            <summary>
            Simple validation regex
            </summary>
        </member>
        <member name="M:Nglib.FORMAT.ValidateTools.MailIsValid(System.String)">
            <summary>
            Validation d'un mail
            </summary>
        </member>
        <member name="M:Nglib.FORMAT.ValidateTools.IPAddressIsValid(System.String)">
            <summary>
            Validation d'une adresse IP
            </summary>
        </member>
        <member name="M:Nglib.FORMAT.ValidateTools.ValidatePhoneNumber(System.String,System.Int32)">
            <summary>
            Permet de valider et corriger un numero en numéro international  (+33)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Nglib.SECURITY.CRYPTO.CertificatesManager">
            <summary>
            Gestionnaire de certificats
            </summary>
        </member>
        <member name="F:Nglib.SECURITY.CRYPTO.CryptoCoreTools.DefaultDerivedSaltBytes">
            <summary>
            Utilisé pour le Rfc2898DeriveBytes GetDerived
            </summary>
        </member>
        <member name="M:Nglib.SECURITY.CRYPTO.CryptoCoreTools.GetDerived(System.Byte[],System.Int32)">
            <summary>
            Dérivation - salt
            </summary>
            <param name="passwordBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Nglib.SECURITY.CRYPTO.CryptoCoreTools.GenerateRandomBytes(System.Int32)">
            <summary>
            Génération de bytes aléatoires avec RNGCryptoServiceProvider
            </summary>
        </member>
        <member name="P:Nglib.SECURITY.CRYPTO.CryptoOption.InitializationVectorBytes">
            <summary>
            Vecteur d'initialisation nécessaire. Valeur en clair et généré aléatoirement
            </summary>
        </member>
        <member name="P:Nglib.SECURITY.CRYPTO.CryptoOption.CryptoKeyBytes">
            <summary>
            Clef de cryptage/décryptage
            </summary>
        </member>
        <member name="P:Nglib.SECURITY.CRYPTO.CryptoOption.CryptoMode">
            <summary>
            Cryptage par RSA ou AES
            </summary>
        </member>
        <member name="P:Nglib.SECURITY.CRYPTO.CryptoOption.RandomStartSalt">
            <summary>
            Nombre de caractères aléatoires en début de cryptage (A Ajouter ou supprimer)
            </summary>
        </member>
        <member name="M:Nglib.SECURITY.CRYPTO.CryptoOption.SetCryptoPassword(System.String)">
            <summary>
            Sera Haché en SHA256
            </summary>
            <param name="PasswordValue"></param>
            <returns></returns>
        </member>
        <member name="T:Nglib.SECURITY.CRYPTO.CryptoTools">
            <summary>
            Outils de cryptages et hachages
            </summary>
        </member>
        <member name="M:Nglib.SECURITY.CRYPTO.CryptoTools.Encrypt(System.Byte[],Nglib.SECURITY.CRYPTO.ICryptoOption)">
            <summary>
             Encryptage binaire AES
            </summary>
            <param name="bytesToBeEncrypted">data</param>
            <param name="passwordBytes">password</param>
            <param name="WithBeforeSalt">Ajoutera un bloc 16byte aléatoire au début</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.SECURITY.CRYPTO.CryptoTools.Decrypt(System.Byte[],Nglib.SECURITY.CRYPTO.ICryptoOption)">
            <summary>
            Décryptage Binaire AES
            </summary>
        </member>
        <member name="T:Nglib.SECURITY.CRYPTO.TokenJwtTools">
            <summary>
                Outils pour gérer les token
            </summary>
        </member>
        <member name="M:Nglib.SECURITY.CRYPTO.TokenJwtTools.EncodeBasicJWT(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Création d'un Token JWT avec les claims (iss,aud,sub,iat,exp,jti)
            </summary>
            <param name="keyHs256">Clef de signature</param>
            <param name="issuer">Emetteur du token</param>
            <param name="audience">Destinataire du token</param>
            <param name="subject">Sujet(user,...) concerné par ce token</param>
            <param name="addJti">Rendre le token unique</param>
            <param name="ExpireSecond">Expiration du token</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.SECURITY.CRYPTO.TokenJwtTools.GetHmacSha256(System.String,System.String)">
            <summary>
                Permet de créer une signature Hmac256 comme les token JWT
            </summary>
            <param name="value"></param>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Nglib.SECURITY.CRYPTO.TokenJwtTools.Encode(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
                Création d'un token HS256 HMAC AES
            </summary>
            <param name="payload">Données à signer</param>
            <param name="keyHs256">Clef UTF8</param>
            <returns></returns>
        </member>
        <member name="M:Nglib.SECURITY.CRYPTO.TokenJwtTools.Decode(System.String,System.String)">
            <summary>
                Valider et obtenir les données d'un token JWT  HS256 HMAC AES
            </summary>
            <param name="token">Token signé</param>
            <param name="keyHs256">Clef</param>
            <returns></returns>
        </member>
        <member name="T:Nglib.SECURITY.IDENTITY.ClaimsIdentityTools">
            <summary>
            Outils pour les claims identity
            </summary>
        </member>
        <member name="M:Nglib.SECURITY.IDENTITY.ClaimsIdentityTools.SetClaim(System.Security.Claims.ClaimsIdentity,System.String,System.String,System.String)">
            <summary>
            Permet de définir un claim et le remplacer si exsite déja
            </summary>
        </member>
        <member name="P:Nglib.SOLUTIONS.IDENTITY.TENANTS.ITenant2.TenantId">
            <summary>
            Identifiant unique du tenant
            </summary>
        </member>
        <member name="P:Nglib.SOLUTIONS.IDENTITY.TENANTS.ITenant2.Flux">
            <summary>
            Données NoSql supplémentaires
            </summary>
        </member>
        <member name="M:Nglib.SOLUTIONS.IDENTITY.TENANTS.ITenant2.CloneCryptoContext(System.Type)">
            <summary>
            Permet de cloner le crypto context (si cloisonement des tenants par cryptage)
            </summary>
            <param name="datapoType"></param>
            <returns></returns>
        </member>
        <member name="F:Nglib.WEB.PIPELINE.RequestPersistantModeEnum.NO">
            <summary>
            Ne jamais tracer ce endoint
            </summary>
        </member>
        <member name="F:Nglib.WEB.PIPELINE.RequestPersistantModeEnum.ERROR">
            <summary>
            Tracer que si erreur
            </summary>
        </member>
        <member name="F:Nglib.WEB.PIPELINE.RequestPersistantModeEnum.NORMAL">
            <summary>
            Toujours tracer
            </summary>
        </member>
        <member name="F:Nglib.WEB.PIPELINE.RequestPersistantModeEnum.FULL">
            <summary>
            Toujours tracer avec un maximum d'information
            </summary>
        </member>
        <member name="T:Nglib.WEB.PIPELINE.IPipelineRequestContext">
            <summary>
            Représente une Requête sur le pipeline du Serveur MVC 
            </summary>
        </member>
        <member name="P:Nglib.WEB.PIPELINE.IPipelineRequestContext.RequestId">
            <summary>
            Identifiant Unique de la requête HTTP
            </summary>
        </member>
        <member name="P:Nglib.WEB.PIPELINE.IPipelineRequestContext.RoutePath">
            <summary>
            Route utilisé
            </summary>
        </member>
        <member name="P:Nglib.WEB.PIPELINE.IPipelineRequestContext.TotalElapsedMs">
            <summary>
            Temps
            </summary>
        </member>
        <member name="P:Nglib.WEB.PIPELINE.IPipelineRequestContext.PersistantMode">
            <summary>
            Mode de stockage
            </summary>
        </member>
        <member name="P:Nglib.WEB.PIPELINE.IPipelineRequestContext.State">
            <summary>
            Status de la requete
            </summary>
        </member>
        <member name="P:Nglib.WEB.PIPELINE.IPipelineRequestContext.StateText">
            <summary>
            Status text de la requete
            </summary>
        </member>
        <member name="P:Nglib.WEB.PIPELINE.IPipelineRequestContext.DateCreate">
            <summary>
            Date de création de la requette
            </summary>
        </member>
        <member name="P:Nglib.WEB.PIPELINE.IPipelineRequestContext.Flux">
            <summary>
            Données NoSql supplémentaires
            </summary>
        </member>
        <member name="P:Nglib.WEB.PIPELINE.IPipelineRequestContext.MasterException">
            <summary>
            Erreur sur la requette
            </summary>
        </member>
        <member name="M:Nglib.WEB.PIPELINE.IPipelineRequestContext.AddRequestLog(System.String)">
            <summary>
            Ajouter un log dans l'objet
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Nglib.WEB.PIPELINE.IPipelineRequestContext.DisposeLarge">
            <summary>
            Vider le cache de l'objet, sans effacer les valeurs importante
            </summary>
        </member>
    </members>
</doc>
